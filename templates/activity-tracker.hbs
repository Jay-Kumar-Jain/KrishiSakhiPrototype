<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Krishi Sakhi â€” Activity Tracker</title>

  <style>
    :root { --green: #2d4b2d; }

    body {
      margin: 0;
      font-family: Arial, Helvetica, sans-serif;
      background: #f3f4ec;
      display: flex;
    }

    .sidebar {
      width: 200px;
      background: #2d5016;
      color: #fff;
      height: 100vh;
      position: fixed;
      left: 0;
      top: 0;
      padding: 18px;
      box-sizing: border-box;
    }

    .sidebar img {
      width: 110px;
      display: block;
      margin: 6px auto;
    }

    .sidebar h2 {
      font-size: 16px;
      margin: 8px 0;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-align: center;
    }

    .nav-menu {
      margin-top: 14px;
      padding: 0;
      list-style: none;
    }

    .nav-item {
      display: block;
      color: #fff;
      text-decoration: none;
      padding: 10px;
      border-radius: 6px;
      margin: 6px 0;
    }

    .nav-item:hover {
      background: rgba(247, 245, 243, 0.1);
      border-left-color: #f7f5f3;
      padding-left: 24px;
    }

    .nav-item.active {
      background: rgba(247, 245, 243, 0.15);
      border-left-color: #f7f5f3;
      font-weight: 600;
    }

    .main {
      margin-left: 200px;
      padding: 22px;
      flex: 1;
      min-height: 100vh;
      box-sizing: border-box;
    }

    .card {
      background: #fff;
      border-radius: 12px;
      padding: 18px;
      margin-bottom: 18px;
      box-shadow: 0 6px 18px rgba(0,0,0,0.06);
    }

    h1 { margin: 0 0 8px; }
    label { display: inline-block; margin-bottom: 6px; font-weight: 600; }

    select, input[type=date] {
      padding: 8px;
      border-radius: 6px;
      border: 1px solid #ccc;
      margin-right: 10px;
    }

    button {
      padding: 9px 14px;
      border-radius: 6px;
      border: none;
      background: var(--green);
      color: #fff;
      cursor: pointer;
    }

    button:hover { background: #3d6b3d; }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(260px,1fr));
      gap: 16px;
    }

    .task-list { list-style: none; padding: 0; margin: 0; }

    .task-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      border-radius: 8px;
      border: 1px solid #e6e6e6;
      margin-bottom: 8px;
      background: #fff;
    }

    .task-item.completed {
      background: #e9ffe9;
      border-color: #cfeecf;
      text-decoration: line-through;
      color: #666;
    }

    .small { font-size: 13px; color: #555; }

    .progress {
      height: 10px;
      background: #efe;
      border-radius: 8px;
      overflow: hidden;
      margin-top: 6px;
    }

    .progress > i {
      display: block;
      height: 100%;
      background: linear-gradient(90deg, var(--green), #3d6b3d);
      width: 0%;
    }

    .note {
      font-size: 13px;
      color: #666;
      margin-top: 8px;
    }
  </style>
</head>
<body>

  <aside class="sidebar">
    <img src="/images/logo.png" alt="Krishi Sakhi Logo">
    <h2>KRISHI SAKHI</h2>
    <nav class="nav-menu">
      <a class="nav-item" href="/home">HOME</a>
      <a class="nav-item" href="/chatbot">CHATBOT</a>
      <a class="nav-item" href="/settings">SETTINGS</a>
      <a class="nav-item" href="/profile">PROFILE</a>
      <a class="nav-item" href="/about">ABOUT US</a>
    </nav>
  </aside>

  <main class="main">
    <h1>ðŸŒ± Activity Tracker</h1>

    <div class="card">
      <div style="display:flex;flex-wrap:wrap;gap:12px;align-items:flex-end">
        <div>
          <label for="cropSelect">Choose crop</label><br>
          <select id="cropSelect">
            <option value="paddy">Paddy (Rice)</option>
            <option value="coconut">Coconut</option>
            <option value="banana">Banana</option>
            <option value="pepper">Pepper</option>
            <option value="cardamom">Cardamom</option>
            <option value="rubber">Rubber</option>
            <option value="arecanut">Arecanut</option>
            <option value="tapioca">Tapioca</option>
            <option value="cashew">Cashew</option>
            <option value="coffee">Coffee</option>
          </select>
        </div>

        <div>
          <label for="sowingDate">Sowing / Planting date</label><br>
          <input id="sowingDate" type="date" />
        </div>

        <button id="loadBtn">Load Tasks</button>
        <button id="resetBtn" style="background:#a22">Reset Progress</button>

        <div style="margin-left:auto;text-align:right">
          <div class="small">Current Day: <strong id="dayBadge">-</strong></div>
          <div class="small">Schedule length: <strong id="scheduleLen">-</strong></div>
          <div class="progress"><i id="progBar"></i></div>
        </div>
      </div>
      <p class="note">Check todayâ€™s tasks. Once all are completed, it will auto-advance to the next day. Upcoming tasks always stay visible.</p>
    </div>

    <div class="grid">
      <div class="card">
        <h3 id="titleToday">ðŸ“… Today's Tasks</h3>
        <ul id="todayTasks" class="task-list"></ul>
        <p id="noToday" class="small" style="display:none">No tasks scheduled for today.</p>
      </div>

      <div class="card">
        <h3>âœ… Completed Tasks</h3>
        <ul id="completedTasks" class="task-list"></ul>
      </div>

      <div class="card">
        <h3>ðŸ•’ Upcoming Tasks</h3>
        <ul id="upcomingTasks" class="task-list"></ul>
      </div>
    </div>
  </main>

  <script>
    // ---------- Build Schedule ----------
    function buildSchedule(pairs, minLength=60, finalDayCap=200){
      pairs.sort((a,b)=>a.day-b.day);
      const map={}; pairs.forEach(p=>map[p.day]=p.task);
      const lastDay=Math.max(...pairs.map(p=>p.day),0);
      const maxDay=Math.min(Math.max(lastDay,minLength),finalDayCap);
      const schedule=[];
      for(let d=0;d<=maxDay;d++){
        if(map[d]) schedule.push({day:d,task:map[d]});
        else if(d%30===0) schedule.push({day:d,task:`Fertilizer application`});
        else if(d%25===0) schedule.push({day:d,task:`Pesticide spray`});
        else if(d%20===0) schedule.push({day:d,task:`Insecticide spray`});
        else if(d%7===0) schedule.push({day:d,task:`Weekly irrigation & weed check`});
        else if(d%5===0) schedule.push({day:d,task:`Routine inspection`});
        else schedule.push({day:d,task:`Daily: Observe & water`});
      }
      return schedule;
    }

    // Predefined schedules for crops
    const cropSchedules={
      paddy:buildSchedule([
        {day:0,task:"Sow paddy seeds"},
        {day:10,task:"Weeding"},
        {day:20,task:"Insecticide spray against stem borer"},
        {day:30,task:"Fertilizer application"},
        {day:40,task:"Pesticide spray for leaf folder"},
        {day:90,task:"Harvest"}
      ]),
      banana:buildSchedule([
        {day:0,task:"Plant banana sucker"},
        {day:20,task:"Manure application"},
        {day:45,task:"Insecticide spray for aphids"},
        {day:60,task:"Propping support"},
        {day:90,task:"Fertilizer application"},
        {day:180,task:"Harvest"}
      ]),
      // ðŸ‘‰ Add the other crops here (coconut, pepper, cardamom, rubber, arecanut, tapioca, cashew, coffee)
    };

    // ---------- Tracker Logic ----------
    const cropSelect=document.getElementById('cropSelect');
    const sowingDateInput=document.getElementById('sowingDate');
    const loadBtn=document.getElementById('loadBtn');
    const resetBtn=document.getElementById('resetBtn');
    const todayTasksEl=document.getElementById('todayTasks');
    const completedTasksEl=document.getElementById('completedTasks');
    const upcomingTasksEl=document.getElementById('upcomingTasks');
    const dayBadge=document.getElementById('dayBadge');
    const scheduleLen=document.getElementById('scheduleLen');
    const progBar=document.getElementById('progBar');
    const titleToday=document.getElementById('titleToday');
    const noToday=document.getElementById('noToday');

    let currentDay=null;

    function storageKey(crop,date){return `ks|${crop}|${date}`;}
    function progressKey(crop,date){return `ks_prog|${crop}|${date}`;}

    function calcDayFromSowing(dateISO){
      const s=new Date(dateISO), t=new Date();
      return Math.max(0,Math.floor((t-s)/(1000*60*60*24)));
    }
    function maxScheduleDay(sch){return sch.length?Math.max(...sch.map(s=>s.day)):0;}
    function renderProgress(curr,maxD){
      const pct=maxD?Math.min(100,Math.round((curr/maxD)*100)):0;
      progBar.style.width=pct+"%"; dayBadge.textContent=curr; scheduleLen.textContent=maxD+" days";
    }

    function loadTasks(forceDay=null){
      const crop=cropSelect.value, sowing=sowingDateInput.value;
      if(!sowing){alert("Select sowing date");return;}
      const schedule=cropSchedules[crop]; 
      const maxDay=maxScheduleDay(schedule);

      const natural=calcDayFromSowing(sowing);
      const savedProg=parseInt(localStorage.getItem(progressKey(crop,sowing))||natural);
      currentDay=forceDay!==null?forceDay:Math.max(natural,savedProg);
      if(currentDay>maxDay) currentDay=maxDay;

      renderProgress(currentDay,maxDay); 
      titleToday.textContent=`ðŸŒ¿ ${crop} â€” Day ${currentDay}`;

      let saved=localStorage.getItem(storageKey(crop,sowing));
      let completedArr = saved ? JSON.parse(saved) : [];

      todayTasksEl.innerHTML=""; 
      completedTasksEl.innerHTML=""; 
      upcomingTasksEl.innerHTML="";

      schedule.sort((a,b)=>a.day-b.day).forEach(item=>{
        const id=`${item.day}:${item.task}`;
        const li=document.createElement('li'); 
        li.className="task-item"; 
        li.dataset.day=item.day;

        const cb=document.createElement('input'); 
        cb.type="checkbox"; 
        cb.value=id;

        li.appendChild(cb); 
        li.appendChild(document.createTextNode(`${item.task} (Day ${item.day})`));

        if(completedArr.includes(id)){
          cb.checked=true; 
          li.classList.add("completed"); 
          completedTasksEl.appendChild(li);
        } 
        else if(item.day===currentDay){
          todayTasksEl.appendChild(li);
        } 
        else if(item.day>currentDay){
          upcomingTasksEl.appendChild(li);
        }

        cb.addEventListener('change',()=>{
          let arr=JSON.parse(localStorage.getItem(storageKey(crop,sowing))||"[]");
          if(cb.checked){
            li.classList.add("completed"); 
            arr.push(id); 
            completedTasksEl.appendChild(li);
          } else {
            li.classList.remove("completed"); 
            arr=arr.filter(x=>x!==id);
            if(item.day===currentDay) todayTasksEl.appendChild(li); 
            else upcomingTasksEl.appendChild(li);
          }
          localStorage.setItem(storageKey(crop,sowing),JSON.stringify(arr));
          checkAdvance(crop,sowing,schedule);
        });
      });

      noToday.style.display=todayTasksEl.children.length? "none":"block";
    }

    function checkAdvance(crop,sowing,schedule){
      const remain=[...todayTasksEl.querySelectorAll("input")].filter(cb=>!cb.checked);
      if(remain.length===0){
        let next=currentDay+1, maxD=maxScheduleDay(schedule);
        while(next<=maxD && !schedule.find(it=>it.day===next)) next++;
        if(next>maxD) next=maxD;
        localStorage.setItem(progressKey(crop,sowing),next);
        setTimeout(()=>loadTasks(next),300);
      }
    }

    resetBtn.addEventListener('click',()=>{
      const crop=cropSelect.value, sowing=sowingDateInput.value;
      if(!sowing){alert("Select sowing date first");return;}
      if(confirm("Reset progress for this crop and date?")){
        localStorage.removeItem(storageKey(crop,sowing));
        localStorage.removeItem(progressKey(crop,sowing));
        loadTasks(0);
      }
    });

    loadBtn.addEventListener('click',()=>loadTasks());
  </script>
</body>
</html>
